# Loaded for all shells.

verbose $fg_bold[red]Loading$reset_color $fg_bold[green]zshrc$reset_color -- by $fg[cyan]$(basename "$0")$reset_color

function() {
# $DOTFILES/zsh/startup {{{ -----------------------------------------------------------------------------
  # Cache function results.
  build-cache

  zplug-init
  if [[ $? -ne 0 ]]; then
    return 1
  fi
# }}} $DOTFILES/zsh/startup -----------------------------------------------------------------------------

  # Use extended_glob option for zplug subshells. We need to change it for zplug's use tags containing extended globs.
  zstyle ":zplug:config:setopt" only_subshell extended_glob

  # # Save extended_glob option for restore. We need to change it for zplug's of tags. --------------------
  # local eg=$options[extended_glob]
  # setopt extended_glob

# zplug {{{ ---------------------------------------------------------------------------------------------
  ZPLUG_LOADFILE="$DOTFILES/zsh/zplugs"

  # Work around https://github.com/zplug/zplug/issues/212 until https://github.com/zplug/zplug/pull/215 is merged.
  export PATH=$ZPLUG_HOME/bin:$PATH

  # Install plugins if they are not installed -----------------------------------------------------------
  zplug-install # see also : ./functions/startup/zplug-install

  # Then, source plugins and add commands to the PATH ---------------------------------------------------
  zplug load --verbose

# }}} zplug ---------------------------------------------------------------------------------------------

  # Restore extended_glob option. -----------------------------------------------------------------------
  # options[extended_glob]=$eg

# $DOTFILES/zsh/startup {{{ -----------------------------------------------------------------------------

  # Clean up after ourselves.
  undefine-startup-functions

  # vim:set filetype=sh:
# }}} $DOTFILES/zsh/startup -----------------------------------------------------------------------------
}

clear

# COLORSCHEME (base16-shell) for vim and zsh
#==============================================================================#

# reload zsh config
alias reload!='source ~/.zshrc'

# Default THEME and BACKGROUND
if [ -z "$THEME" ]; then
    # export THEME="base16-chalk"
    export THEME="base16-nmdf"
fi
if [ -z "$BACKGROUND" ]; then
    export BACKGROUND="dark"
fi

THEMEDIR="$HOME/.config/base16-shell"
BASE16_SHELL="$THEMEDIR/$THEME.$BACKGROUND.sh"
[[ -s $BASE16_SHELL ]] && source "$BASE16_SHELL"

# set the background color to light
function nexttheme() {
  echo "Search for: *.$BACKGROUND.sh in $THEMEDIR..."
  local choose=false
  local count=0
  for file in $(find "$THEMEDIR" -maxdepth 1 -not -type d -name "*.$BACKGROUND.sh") ; do
    count=$(($count+1))
    echo "$count: $file"
    if [[ $count == 1 ]]; then local firstfile="$file" ; fi
    if [[ $choose == "true" ]]; then choose="$file" ; fi
    if [[ $file == "$THEMEDIR/$THEME.$BACKGROUND.sh" ]]; then choose=true ; fi
  done
  echo "-->choose=$choose"
  if [[ $choose == "true" ]]; then choose="$firstfile" ; fi
  echo "==>choose=$choose"

  # remove .[dark|light].sh from $choose
  choose=$(basename "$choose" | cut -d. -f1)
  echo "==> THEME=$choose"
  if [[ $choose != "$THEME" ]]; then export THEME="$choose" && reload! ; fi
  testcolorscheme
}

# set the background color to light
function light() {
  if [[ $BACKGROUND != "light" ]]; then export BACKGROUND="light" && reload! ; fi
  testcolorscheme
}

function dark() {
  if [[ $BACKGROUND != "dark" ]]; then export BACKGROUND="dark" && reload! ; fi
  testcolorscheme
}

function testcolorscheme(){
  echo -e " THEME=$THEME \n BACKGROUND=$BACKGROUND"
  esc=""
  colors=($(xrdb -query | sed -n 's/.*color\([0-9]\)/\1/p' | sort -nu | cut -f2))
  for i in {0..7}; do echo -en "${esc}[0;3${i}mâ–‰${esc}[0;9${i}mâ– " ; done; echo -e "\n"
}

# CHANGING WALLPAPER using feh
#==============================================================================#
function nextwall() {
  # get the current wallpaper from the 2nd line: feh --bg-tile '/home/march/.wallpaper/patterns/fresh.png'
  local currentwall=$(sed -n '2p' < "$HOME/.fehbg" | sed 's/^.*\(\/home\/*\)/\1/g')
  # remove the ' at the end
  currentwall=${currentwall%\'*}
  # retrieve the wallpaper directory
  local WALLDIR=$(dirname $currentwall)
  echo "search for: $(basename $currentwall) in $WALLDIR..."
  local choose=false
  local count=0
  for file in $(find "$WALLDIR/" -maxdepth 1 -not -type d) ; do
    let count++
    if [[ $count == 1 ]]; then local firstfile="$file" ; fi
    if [[ $choose == "true" ]]; then choose="$file" ; fi
    if [[ $file == "$currentwall" ]]; then choose=true ; fi
  done
  echo "-->choose=$choose"
  if [[ $choose == "true" ]]; then choose="$firstfile" ; fi
  echo "==>choose=$choose"

  echo -e "#!/bin/sh\nfeh --bg-tile '$choose'" > "$HOME/.fehbg" | sh
}

# FZF - a command-line fuzzy finder for bash/zsh/vim + supports tmux
#==============================================================================#

#     ____      ____
#    / __/___  / __/
#   / /_/_  / / /_
#  / __/ / /_/ __/
# /_/   /___/_/-completion.bash
#
# - $FZF_TMUX               (default: 1)
# - $FZF_TMUX_HEIGHT        (default: '40%')
# - $FZF_COMPLETION_TRIGGER (default: '**')
# - $FZF_COMPLETION_OPTS    (default: empty)

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

export FZF_DEFAULT_OPTS='
  --bind ctrl-f:page-down,ctrl-b:page-up
  --color dark,hl:33,hl+:37,fg+:235,bg+:9,fg+:254
  --color info:254,prompt:37,spinner:108,pointer:235,marker:235
'
export FZF_COMPLETION_TRIGGER=''

bindkey '^P' up-history
bindkey '^N' down-history
bindkey '^T' fzf-completion
bindkey '^I' $fzf_default_completion
bindkey '^S' sudo-command-line
# bind '"\C-F":"fh\n"'

# If you're running fzf in a large git repository, git ls-tree can boost up the speed of the traversal.
export FZF_DEFAULT_COMMAND='
  (git ls-tree -r --name-only HEAD ||
   find . -path "*/\.*" -prune -o -type f -print -o -type l -print |
      sed s/^..//) 2> /dev/null'

# usage : fzfr <program> , for example: fzfr feh
fzfr() { fzf -m -x | { xargs -d'\n' -r "$@" & } }

# usage : fzf-tmux [-h HEIGHT[%]] [-w WIDTH[%]] [--] [FZF OPTIONS]
# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git branch) &&
  branch=$(echo "$branches" | fzf-tmux -h 15 +m) &&
  git checkout $(echo "$branch" | sed "s/.* //")
}