" First and Foremost {{{ ============================================
set nocompatible " Forget compatibility with vi (This must be first)

set encoding=utf-8
set fenc=utf-8
set termencoding=utf-8

" set a map leader for more key combos
let mapleader = ' '
" save a lot of unneeded shifting
noremap ; :
noremap : ;
" bad habit become useful to quit insert mode
inoremap jk <Esc>
" }}}
" Autoinstall vim-plug {{{ ==========================================
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" }}}
" Plugins with their settings "{{{ ==================================
call plug#begin('~/.config/nvim/plugged')
    " usage : PlugInstall PlugUpdate PlugClean
" colorscheme & appearance ----------------------
Plug 'flazz/vim-colorschemes'
"Plug 'chriskempson/base16-vim'          " preview : http://chriskempson.github.io/base16/
"Plug 'sjl/badwolf'
"Plug 'morhetz/gruvbox'
"Plug 'w0ng/vim-hybrid'

Plug 'vim-airline/vim-airline' " fancy statusline
Plug 'vim-airline/vim-airline-themes' " themes for vim-airline
    " settings for vim-airline {{{
    "let g:airline_theme="base16"
    let g:airline#extensions#tabline#enabled = 1
    let g:airline_section=''
    let g:airline_detect_paste=1 " Show PASTE if in paste mode
    let g:airline_powerline_fonts = 1
    if !exists('g:airline_symbols')
        let g:airline_symbols = {}
    endif

    " unicode symbols
    let g:airline_left_sep = ''
    let g:airline_left_alt_sep = ''
    let g:airline_right_sep = ''
    let g:airline_right_alt_sep = ''
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = ''
    let g:airline_symbols.readonly = ''
    let g:airline_symbols.paste = 'ρ'
    let g:airline_symbols.whitespace = 'Ξ'
    " }}}
Plug 'jszakmeister/vim-togglecursor'
    " use vim-togglecursor OR just 4 loc {{{
    " Use a blinking upright bar cursor in Insert mode, a solid block in normal
    " and a blinking underline in replace mode
    "  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
    "  let &t_SI = "\<Esc>[5 q"
    "  let &t_SR = "\<Esc>[3 q"
    "  let &t_EI = "\<Esc>[2 q"
    " }}}
Plug 'junegunn/rainbow_parentheses.vim' " visualize nested parentheses
    " settings for rainbow_parentheses {{{
    let g:rainbow#max_level = 8
    let g:rainbow#pairs = [['(', ')'], ['[', ']']]
    " Activate rainbow_parentheses
    if has('autocmd') && !exists('autocommands_loaded') " Make sure Vim has autocmd support
        autocmd VimEnter * RainbowParentheses
    endif
    "}}}
Plug 'itchyny/landscape.vim'

" must-have utilities --------------------------
" fzf can take any list as input (files, buffers, project-wide tags, history, mru, etc.)
Plug 'junegunn/fzf', { 'dir': '~/.fzf' }
Plug 'junegunn/fzf.vim'
    " HOW? :Files :Buffers :BLines :BTags :Tags :History :Commits :BCommits ...
    " settings for fzf {{{
    let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -g ""'
    let g:fzf_height='35%'
    let g:fzf_action = {
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit'
        \ }

    "Unite-like layout
    "let g:fzf_layout = { 'window': 'enew' }

    if executable('fzf')
        " <C-p> to search files (-m means multi-select with (shift)tab)
        noremap <silent> <C-p> :FZF -m --no-hscroll<cr>

        " Open files in vertical horizontal split
        nnoremap <silent> <Leader>v :call fzf#run({
        \   'right': winwidth('.') / 2,
        \   'sink':  'vertical botright split' })<CR>

         " Use fuzzy completion relative filepaths across directory
        inoremap <expr> <c-x><c-f> fzf#vim#complete#path('git ls-files $(git rev-parse --show-toplevel)')

        " Better command history with q:
        command! CmdHist call fzf#vim#command_history({'right': '40'})
        nnoremap h: :CmdHist<CR>

        " Better search history
        command! QHist call fzf#vim#search_history({'right': '40'})
        nnoremap h/ :QHist<CR>

        command! -bang -nargs=* Ack call fzf#vim#ag(<q-args>, {'down': '40%', 'options': --no-color'})

    else
    " CtrlP fallback
    end
    " }}}
Plug 'mileszs/ack.vim'              " search inside files (:Ack <keywords>) --> ? --> o/v ...
    " WHY ? use ack and ag as a replacement for vim's built in grep and vimgrep
    " settings for Ack/Ag {{{
    nnoremap <silent> <leader>/ :execute 'Ack ' . input('Ack/')<CR>
    if executable('ag')
        let g:ackprg = 'ag --nogroup --nocolor --column'
    endif

    nnoremap <silent> S :call SearchWordWithAg()<CR>
    function! SearchWordWithAg()
        execute 'Ack' expand('<cword>')
    endfunction
    " }}}
Plug 'tpope/vim-fugitive'
    " HOW ? {{{
    " (1) Gblame (who edit every sigle lines)
    " (2) Glog --> [q ]q to load every version of the editted file --> Gedit to the head file
    " (3) Gdiff --> Gwrite (git add) --> Gcommit --> write commit message --> wq
    " (4) Gstatus --> - to stage files
    " }}}
    " settings for fugitive {{{
      " Fix broken syntax highlight in gitcommit files
        " (https://github.com/tpope/vim-git/issues/12)
        let g:fugitive_git_executable = 'LANG=en_US.UTF-8 git'

        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<cr>
        nnoremap <silent> <leader>ge :Gedit<CR>
        nnoremap <silent> <leader>gE :Gedit<space>
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gr :Gread<CR>
        nnoremap <silent> <leader>gR :Gread<space>
        nnoremap <silent> <leader>gw :Gwrite<CR>
        nnoremap <silent> <leader>gW :Gwrite!<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gq :Gwq<CR>
        nnoremap <silent> <leader>gQ :Gwq!<CR>

        function! ReviewLastCommit()
            if exists('b:git_dir')
            Gtabedit HEAD^{}
            nnoremap <buffer> <silent> q :<C-U>bdelete<CR>
            else
            echo 'No git a git repository:' expand('%:p')
            endif
        endfunction
        nnoremap <silent> <leader>g` :call ReviewLastCommit()<CR>

        augroup fugitiveSettings
            autocmd!
            autocmd FileType gitcommit setlocal nolist
            " Fugitive - remove when done
            autocmd BufReadPost fugitive://* setlocal bufhidden=delete
        augroup END
    " }}}
Plug 'airblade/vim-gitgutter'
Plug 'benmills/vimux'               " interact with tmux to run commands (project-specific settings at <project>.vimrc)
Plug 'majutsushi/tagbar'            " require to install ctags
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] } | Plug 'Xuyuanp/nerdtree-git-plugin' | Plug 'ryanoasis/vim-devicons'           " WHY ? Adds filetype icons to NERDTree, lighline, ...
    " HOW ? <leader>k --> m --> a to add new file
    " settings for NERDTree {{{
    let g:NERDTreeQuitOnOpen=1          " close NERDTree after a file is opened
    let NERDTreeShowHidden=1            " show hidden files in NERDTree
    let NERDTreeIgnore = ['\.js.map$']  " remove some files by extension
    noremap <silent> <leader>k :NERDTreeToggle<cr>
    " expand to the path of the file in the current buffer
    noremap <silent> <leader><S-k> :NERDTreeFind<cr>
    " }}}
    " settings for nerdtree-git-plugin {{{
    let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
    " }}}
Plug 'easymotion/vim-easymotion'
    " settings for easymotion {{{
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_off_screen_search = 0

    " <Leader>f{char} to move to {char}
    map  <Leader>f <Plug>(easymotion-bd-f)
    nmap <Leader>f <Plug>(easymotion-overwin-f)
    " }}}
Plug 'terryma/vim-multiple-cursors'
"Plug 'coot/cmdalias_vim'

" Navigation -----------------------------------
" language-specific plugins --------------------
"Plug 'scrooloose/syntastic'

" Completion -----------------------------------
"Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }

" Text Manipulation ----------------------------
Plug 'tpope/vim-unimpaired'         " bundling text with [e ]e
"Plug 'tpope/vim-surround'          " surround code with delimiters
Plug 'tomtom/tcomment_vim'
"Plug 'junegunn/vim-easy-align'
"Plug 'Raimondi/delimitMate'
"Plug 'mattn/emmet-vim'
" Text Objects ---------------------------------

" Language -------------------------------------
Plug 'scrooloose/syntastic'
Plug 'mattn/emmet-vim'

" Git ------------------------------------------


" Misc -----------------------------------------
Plug 'mbbill/undotree'
    " settings for toggle gundo {{{
    nnoremap <leader>u :UndotreeToggle<CR>
    " }}}
" utilities ------------------------------------
call plug#end()
" }}}
" Code folding settings {{{ =========================================
if has("folding")
  set foldmethod=syntax   "fold based on indentation, rather than markers
  set foldlevel=0         "fold level-0 when openning a file
  set modelines=1         "check just the final line of the file for a modeline
  set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
  "set foldminlines=5     " Don't fold stuff with less lines
  "set nofoldenable     " Don't enable automatic folding!
endif
" }}}
" Indentation  {{{ ==================================================
" Lines too long to fit on one screen will be truncated.
set nowrap
let &showbreak='↪ '
" Force a 79 column policy with an auto-break on words in comments to assure
" maximum readability. Visually add a column to see where the cut will be.
set linebreak
set colorcolumn=81
set textwidth=80
" Create two format modes, for code and for text
" c : Comments are wrapped based on textwidth
" r : New line in comment is a comment when pressing <Enter>
" o : New line in comment is a comment when pressing o or O
" n : Handles list while formatting
" q : Comments can be re-wrapped using gq
" 1 : Do not end lines with one-char words
set formatoptions=cronq1
"highlight column 80 as well as 120 and onward
"let &colorcolumn="80,".join(range(120,999),",")
set colorcolumn=+1,+40
highlight ColorColumn ctermbg=235 guibg=#2c2d27
"mark +80 characters as error :/\%>80v./+
" }}}
" Spaces & Tabs {{{ =================================================
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " when hitting <BS>, pretend like a tab is removed, even if spaces
set expandtab       " insert tabs rather than spaces for <Tab>

set shiftwidth=4    " number of spaces to use for autoindenting
set shiftround      " use multiple of shiftwidth when indenting with '<' and '>'

" invisible characters
set invlist
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
"set listchars=precedes:←,extends:→,nbsp:◊,trail:⠿,eol:\ ,tab:●·
highlight SpecialKey ctermbg=none " make the highlighting of tabs less annoying
set showbreak=↪

noremap <leader>l :call ListWrapToggle()<CR>
    function! ListWrapToggle()
        if(&list == 1)
            set nolist
            set wrap
        elseif(&wrap == 1)
            set nowrap
            set list
        else
            set nowrap
            set list
        endif
    endfunction
" }}}
" Aesthetics & User Inferace Config {{{ =============================
set t_Co=256
let base16colorspace=256  " Access colors present in 256 colorspace"

execute "set background=".$BACKGROUND
"execute "colorscheme ".$THEME
colorscheme badwolf     " config badwolf (https://github.com/sjl/badwolf)

set number
set relativenumber      " take a look at AUTOCMD section

"set numberwidth=3

" switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running") | syntax enable | endif

set noshowmode          " hide INSERT-VISUAL...text, we already have statusbar
set showcmd             " Show the current command in the lower right corner

" }}}
" Search & Replace {{{ ==============================================
"automatically inserting a \v for searching using regex
nnoremap / /\v

set gdefault    " applies substitutions globally on lines instead of the first occurrance
set hlsearch    " highlight the search result
set incsearch   " set incremental search, like modern browsers
set showmatch   " show matching braces
set ignorecase  " case insensitive searching
set smartcase   " case-sensitive if expresson contains a capital letter

" Highlight all instances of the word under cursor:
noremap <silent> <leader>hh :setl hls<CR>:let @/="\\<<C-r><C-w>\\>"<CR>
" }}}
" Backups and Undo {{{ ==============================================
" Keep undo history across sessions, by storing in file.
if has('persistent_undo')
    if !isdirectory(expand('~').'/.vim/undo')
        silent !mkdir ~/.vim/undo > /dev/null 2>&1
    endif
    set undofile
    set undodir=~/.vim/undo
endif

set nobackup                " do not keep backup files, it's 70's style cluttering
set noswapfile              " do not write annoying intermediate swap files,
                            "    who did ever restore from swap files anyway?

" in case swapfile, backup is ever turned on ...
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp     " store swap files in one of these directories
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp     " store backup files in one of these directories
" }}}
" General shortcuts for functionality {{{ ===========================
" shortcut to save
noremap <C-s> :w<cr>
noremap! <C-s> <esc>:w<cr>

" SPLIT : ?/autosource/splitview.vim {{{ -------------------------------------
set splitbelow         "horizontally open new panes to bottom
set splitright         "vertically open new panes to right
noremap <silent> <C-h> :call WinMove('h')<cr>
noremap <silent> <C-j> :call WinMove('j')<cr>
noremap <silent> <C-k> :call WinMove('k')<cr>
noremap <silent> <C-l> :call WinMove('l')<cr>

    " Window movement shortcuts "
    " move to the window in the direction shown, or create a new window "
    function! WinMove(key)
        let t:curwin = winnr()
        exec "wincmd ".a:key
        if (t:curwin == winnr())
            if (match(a:key,'[jk]'))
                wincmd v
            else
                wincmd s
            endif
            exec "wincmd ".a:key
        endif
    endfunction

" Column scroll-binding on <leader>sb
noremap <silent> <leader>sb :<C-u>let @z=&so<CR>:set so=0 noscb<CR>:bo vs<CR>Ljzt:setl scb<CR><C-w>p:setl scb<CR>:let &so=@z<CR>
" }}}
" Open current fold, closing every other fold to get more focus
nnoremap zz zozMzvzz

" move vertically by each visual line for wrapped long lines {{{ -------------
nnoremap j gj
nnoremap k gk
nnoremap <silent> ^ g^
nnoremap <silent> $ g$
nnoremap V :vnoremap j j<cr>V
nnoremap v :vnoremap j gj<cr>v
" OR : xnoremap <expr> j mode() ==# 'V' ? 'j' : 'gj'
" }}}

" set paste toggle
set pastetoggle=<F6>
" Preserve indentation while pasting text
nnoremap p ]p

noremap <CR> o<Esc>

" clear highlighted searches
noremap <silent> ,/ :nohlsearch<CR>
" search for word under the cursor
"nnoremap <leader>/ "fyiw :/<c-r>f<cr>

" for when you forgot to sudo before editing a file that requires root privileges
cnoremap w!! w !sudo tee % >/dev/null

" Bubbling text : http://vimcasts.org/episodes/bubbling-text/ {{{ ------------
" Visually select the text that was last edited/pasted
nnoremap gV `[v`]
" Select (charwise) the contents of the current line, excluding indentation
nnoremap vv ^vg_
" }}}

"toggle between bracket pairs
nnoremap <tab> %

" enable . command in visual mode
vnoremap . :normal .<cr>
" switch between current and last buffer
noremap <leader>. <c-^>
" wipout buffer
noremap <silent> <leader>b :bw<cr>

" Make the dot command operate over a Visual range.
" (Excellent tip from Drew Neil's Vim Masterclass.)
xnoremap .  :normal .<CR>

" Draw lines of dashes or equal signs based on the length of the line above
inoremap <C-U>- <Esc>kyyp^v$r-ja
inoremap <C-U>= <Esc>kyyp^v$r=ja

" indenting keybinds
nnoremap <Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
" }}}
" Command Aliases {{{ ===============================================
" }}}
" AUTOCOMD : cursor highlight, file type-specific settings, etc. ====
    if has('autocmd') && !exists('autocommands_loaded') " Make sure Vim has autocmd support
	" Filetype-specific autocommands --------------------------------"{{{
    filetype on

    augroup filespecific
        "Remove all previously defined autocmds for the current group.
        autocmd!
        au BufRead,BufNewFile *.json set ft=javascript
        autocmd FileType html setlocal ts=4 sts=4 sw=4 noexpandtab indentkeys-=*<return>

        " Tabstop settings for file types
        autocmd FileType * set tabstop=2|set shiftwidth=2|set expandtab
        autocmd FileType ruby setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
        autocmd FileType coffee setlocal expandtab shiftwidth=2 softtabstop=2 tabstop=2
        autocmd FileType php set tabstop=4|set shiftwidth=4|set expandtab

        " Setup file types
        au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} setf markdown
        au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,Guardfile,config.ru,*.rake} set ft=ruby
        au BufRead,BufNewFile *.twig set filetype=html

    augroup END
    " }}}
	" Mode-aware settings (colorize line number/line/column ...) ----"{{{
	" forks of http://stackoverflow.com/questions/15561132/run-command-when-vim-enters-visual-mode
	augroup HiLightCursor
		autocmd!
		autocmd InsertEnter * call SetCursorColorInsert(v:insertmode)
		autocmd InsertLeave * call ResetCursorColor()
		autocmd CursorHold,CursorHoldI * call WaitingCursorColor()
		autocmd CursorMoved * call ResetCursorColor()
	augroup END

	vnoremap <silent> <expr> <SID>SetCursorColorVisual SetCursorColorVisual()
	nnoremap <silent> <script> v v<SID>SetCursorColorVisual
	nnoremap <silent> <script> V V<SID>SetCursorColorVisual
	nnoremap <silent> <script> <C-v> <C-v><SID>SetCursorColorVisual

	function! SetCursorColorInsert(mode)
	" INSERT MODE
		if a:mode == "i"
			echo "Enter Insert Mode"
			setlocal norelativenumber cursorline cursorcolumn
			highlight CursorLineNr ctermfg=3 guifg=#268bd2
			hi CursorLine ctermfg=NONE ctermbg=234 cterm=bold guifg=Cyan guibg=#3E3D32 gui=bold
			hi CursorColumn ctermfg=NONE ctermbg=234 cterm=NONE guifg=white guibg=#323D3E gui=bold
			hi Cursor ctermfg=red ctermbg=blue cterm=bold guifg=white guibg=#00AAFF gui=bold
	" REPLACE MODE
		elseif a:mode == "r"
			echo "Enter Replace Mode"
			highlight CursorLineNr ctermfg=12 guifg=#dc322f
		endif
	endfunction

	function! SetCursorColorVisual()
	" VISUAL MODE
		echo "Enter Visual Mode"
		highlight CursorLineNr cterm=none ctermfg=cyan guifg=#cb4b16
		return '' " keep the cursor from jumping the beginning of the current line when entering visual mode.
	endfunction

	function! WaitingCursorColor()
	" automatically leave insert mode after 'updatetime' milliseconds of inaction
		stopinsert " --> leaving InsertMode --> ResetCursorColor --> updatetime = 8000 --> wait for another 8s
	" Idle mode
		echo "Waiting for User..."
		setlocal relativenumber cursorline cursorcolumn
		highlight CursorLineNr cterm=none ctermfg=17 guifg=#073642
		hi Cursor cterm=inverse ctermfg=red ctermbg=red guifg=white guibg=#A6E22E gui=bold
		hi CursorLine cterm=underline ctermfg=NONE ctermbg=019 guifg=Cyan guibg=#3E3D32 gui=bold
		hi CursorColumn ctermfg=NONE ctermbg=019 cterm=bold guifg=white guibg=yellow gui=bold
	endfunction

	function! ResetCursorColor()
		set updatetime=15000 " milliseconds
	" NORMAL MODE
		echo "Back to Normal Mode"
		setlocal relativenumber cursorline cursorcolumn
		highlight CursorLineNr cterm=none ctermfg=red guifg=#073642
		hi CursorLine cterm=bold ctermbg=23
		hi CursorColumn ctermfg=NONE ctermbg=235 cterm=NONE guifg=white guibg=#323D3E gui=bold
	endfunction
	" }}}
    " basic autocommands {{{
    augroup vimrcEx
        autocmd!
        " Automatically create parent directory on save if directory doesn't exist {{{
            autocmd BufWritePre *
                \ if expand("<afile>")!~#'^\w\+:/' && !isdirectory(expand("%:h")) |
                \ execute "silent! !mkdir -p ".shellescape(expand('%:h'), 1) | redraw! | endif
        "}}}
        " Save all files on focus lost, ignoring warnings about untitled buffers {{{
            autocmd FocusLost * silent! wa
        " }}}
        " Check if any buffers were changed outside of Vim {{{
            autocmd CursorHold * checktime
        " }}}
        " Auto remove all trailing whitespace on :w {{{
            autocmd BufWritePre * :%s/\s\+$//e
        " }}}
        " When editing a file, always jump to the last known cursor position.{{{
            " Don't do it when the position is invalid or when inside an event handler
            " (happens when dropping a file on gvim).
            autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
        " }}}
        " Open help files vertically ------------------------------------"{{{
            autocmd FileType help nested call ILikeHelpToTheRight()
            function! ILikeHelpToTheRight()
            if !exists('w:help_is_moved') || w:help_is_moved != "right"
                wincmd L
                let w:help_is_moved = "right"
            endif
            endfunction

            " Help File speedups, <enter> to follow tag, delete for back
            au filetype help nnoremap <buffer><cr> <c-]>
            au filetype help nnoremap <buffer><bs> <c-T>
            au filetype help nnoremap <buffer>q :q<CR>
        " }}}
        " Reload .vimrc and .gvimrc files as soon as they have a change -"{{{
        autocmd BufWritePost $MYVIMRC source $MYVIMRC
        autocmd BufWritePost $MYGVIMRC source $MYGVIMRC
        " }}}
    augroup END
    " }}}

    endif
" OS-SPECIFIC SETTINGS & CROSS-PLATFORM SETTINGS ====================
    " System clipboard {{{ ------------------------------------------
    if has('win32') || has('win64')
        set gfn=Consolas:h10
        set clipboard=unnamed
    else
        let s:kernel = system('echo -n "$(uname -s)"')
        if s:kernel == 'Darwin'
            set guifont=Menlo:h12
            " this doesn't work in mountain lion's default vim (does on macvim)
            set clipboard=unnamed    " brew install reattach-to-user-namespace
        elseif s:kernel == 'Linux'
            set guifont=Knack\ Nerd\ Font\ Complete\ Mono\ 12
            set clipboard=unnamed,unnamedplus " copy/paste between gui/cli --> require xclip/xsel
        endif
    endif
    " }}}
    " Tab keybindings {{{ -------------------------------------------
	if has("gui_macvim") " OS X
		"set guifont=Monaco:h14
		set guifont=Monaco:h12
		"set noantialias
		"set transparency=15

		" Swipe to move between bufers :D
		map <silent> <SwipeLeft> :bprev<CR>
		map <silent> <SwipeRight> :bnext<CR>

		" Cmd+Shift+N = new buffer
		map <silent> <D-N> :enew<CR>

		" Cmd+t = new tab
		nnoremap <silent> <D-t> :tabnew<CR>

		" Cmd+w = close tab (this should happen by default)
		nnoremap <silent> <D-w> :tabclose<CR>

		" Cmd+1...9 = go to that tab
		map <silent> <D-1> 1gt
		map <silent> <D-2> 2gt
		map <silent> <D-3> 3gt
		map <silent> <D-4> 4gt
		map <silent> <D-5> 5gt
		map <silent> <D-6> 6gt
		map <silent> <D-7> 7gt
		map <silent> <D-8> 8gt
		map <silent> <D-9> 9gt

		" OS X probably has ctags in a weird place
		let g:tagbar_ctags_bin='/usr/local/bin/ctags'

	elseif has("gui_gtk2") " Linux
		set guifont=menlo\ 9

		" Alt+n = new buffer
		map <silent> <A-n> :enew<CR>

		" Alt+t = new tab
		nnoremap <silent> <A-t> :tabnew<CR>

		" Alt+w = close tab
		nnoremap <silent> <A-w> :tabclose<CR>

		" Alt+1...9 = go to that tab
		map <silent> <A-1> 1gt
		map <silent> <A-2> 2gt
		map <silent> <A-3> 3gt
		map <silent> <A-4> 4gt
		map <silent> <A-5> 5gt
		map <silent> <A-6> 6gt
		map <silent> <A-7> 7gt
		map <silent> <A-8> 8gt
		map <silent> <A-9> 9gt

	elseif has("gui_win32") " Windows
		" :D
	endif
" }}}
" Cursor & mouse {{{ ================================================
" }}}
" Commands {{{ ======================================================
    " Convenient command to see the difference between the current buffer and the
    " file it was loaded from, thus the changes you made.
    if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
            \ | wincmd p | diffthis
    endif
" }}}
" Post-process : Load my personal functions and settings "{{{ =================
    function! Source(vimfile)
        let src=a:vimfile
        if strlen(src) && filereadable(src)
            exec ':source' . src
        endif
    endfunction
    "automatically sources all file in autosource
    for fpath in split(globpath('~/.config/nvim/autosource/', '*.vim'), '\n')
        :call Source(fpath)
    endfor
"}}}
" vim:foldmethod=marker:foldlevel=0:syntax=vim
