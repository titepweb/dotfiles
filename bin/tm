#!/bin/sh
###############################################################################
# script  : $DOTREPO/bin/tm   maintained by titepweb at gmail.com             #
# status  : finished. Last edit on 2016-02-09                                 #
# feature : 1. conveniently create sample tmux script, named with '.tmux'     #
#           2. easily manage tmux sessions by list all of them                #
#           3. provide an option to clear all tmux sessions.    						  #
###############################################################################
# USAGE   : 1. $ tm --> open tmux session list                                #
#           2. $ tm <path/to/file> or tm <path/to/file.tmux>                  #
#              --> check for <file> session to attach. if <file session> does #
#                  not exist, create sample file.tmux and load it.            #
#           3. generated scripts can be independently run from anywhere. Thus,#
#              place them in any directories. Run them to create tmux sessions.
###############################################################################
# the 'tm' script designed run independently.

### COLOR DEFENITION ### reference: https://en.wikipedia.org/wiki/ANSI_escape_code
# Note: \033 = \e   30+i to specify foreground color, 40+i to specify background color,
reset='\e[0m'     ;

bold='\e[1m'      ;   faint='\e[2m'       ;   italic='\e[3m'       ;   underline='\e[4m'    ;
blink='\e[5m'     ;   blinkfast='\e[6m'   ;   negative='\e[7m'     ;   conceal='\e[8m'      ;
strike='\e[9m'    ;

black='\e[30m'    ;   red='\e[31m'        ;   green='\e[32m'       ;   yellow='\e[33m'      ;
blue='\e[34m'     ;   magenta='\e[35m'    ;   cyan='\e[36m'        ;   white='\e[37m'       ;
xterm='\e[38'     ;   default='\e[39m'    ;

#### LIBRARIES OFFERING COLORFUL INFORMATIVENESS #############################
# NOTE: echo -e "..." = printf "...\n"
function displayTitle {
  echo -e "\r${bold}$1${reset}"
}
function BAD {
  echo -e "\r  [${bold}${magenta}BADBOY${reset}] $1"
}
function INFO {
  echo -e "\r  [${bold}${cyan} INFO ${reset}] $1"
}
function ASK {
  printf "\r  [ ${bold}${yellow} ?? ${reset} ] $1"
}
function OK {
  echo -e "\r  [${bold}${green}  OK  ${reset}] $1"
}
function FAIL {
  printf "\r  [${bold}${red} FAIL ${reset}] $1\n"
  exit 1
}

### A SAMPLE OF PRE-CONFIGURED TMUX ENVIRONMENT ###

MkParentFolder() {
  local inDir="$(dirname "$1")"

  # ask for remove $inDir if it is a regular file
	if [ ! -d $inDir ] && [ -e "$inDir" ]; then
    BAD "File \`${yellow}$inDir${reset}\` ${red}exists${reset}"
    ASK "Delete it [${green}${bold}y${reset}/${red}${bold}n${reset}] "
  	read -p "?" -n 1 -r && echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		  FAIL "Please take a look at \`${red}$inDir${reset}\`"
		else
	    rm "$inDir"
	    OK "${green}Removed ${reset} ${strike}${red} $inDir ${reset}"
		fi
	fi

	# Create $inDir if it does not exist
	if [ ! -d "$inDir" ]; then
	  mkdir -p "$inDir"       # mkdir can make two parent & son directories just with mkdir /parent_folder/son_folder
	  OK "Created \`${green}$inDir"${reset}\` directory!
	fi
}

function create_tmuxconf() {
	PROJECT_NAME=$(basename "${1%.tmux}")
	INFO "Creating ${cyan}$PROJECT_NAME.tmux${reset} in directory ${yellow}$PROJECT_LOCATION${reset}..."
	# make sure that $PROJECT_LOCATION exists
	MkParentFolder "$1"
	# retrieve absolute path of generated .tmux file
  PROJECT_LOCATION="$( cd -P "$(dirname "$1")" && pwd )"
  PROJECT_TMUX="$PROJECT_LOCATION/$PROJECT_NAME.tmux"

# ┌─────────────────────────────────────────────────────────────────────────────┐
	cat << EOF > "$1"
#!/bin/sh
#$PROJECT_TMUX # However, this script will be properly run wherever you put it in.
#created at $(date)
#USAGE : [Run in terminal], even from file browser, to open tmux with vim inside.
#        Some split windows will works in specific directories as pre-scripted.
#        The rest will inherit the working directories from which it is called.
PROJECT_NAME=\$(basename "\${0%.tmux}")    # /!\ tmux session name must be UNIQUE
PROJECT_NAME="\${PROJECT_NAME//[,. ]/}"   # remove all occurances of space and period

# retrieve absolute path of /home/march/PROJECT/dotfiles/temp
PROJECT_LOCATION="\$( cd -P "\$(dirname "\$0" )" && pwd )"
PROJECT_TMUX="\$PROJECT_LOCATION/\$(basename "\$0")"
# move to project directory, which needed for NERDTree, CtrlP, etc. to perform sanely
cd "\$PROJECT_LOCATION"
# cd to git root directory if available
type git >/dev/null 2>&1 && [[ -n \$(git rev-parse --show-toplevel) ]] && {
	PROJECT_LOCATION=\$(git rev-parse --show-toplevel)
	cd "\$PROJECT_LOCATION"
}
type hg >/dev/null 2>&1
if [[ "\$?" == 0 ]] && [[ -n \$(hg root) ]]; then
	PROJECT_LOCATION=\$(hg root)
	cd "\$PROJECT_LOCATION"
fi

# Once inside a tmux session, \`tmux send-keys\` must be used instead of direct shell commands.

# check if tmux session named \$PROJECT_NAME exist
tmux has-session -t \$PROJECT_NAME 2>/dev/null
[ "\$?" != 1 ] && tmux attach-session -t \$PROJECT_NAME && exit

tmux -2 new-session -d -s \$PROJECT_NAME

# Setup a window for developing
tmux new-window -a -t \$PROJECT_NAME:1 -n "vim"   # -a to avoid error msg : "Tmux create window failed: index in use: 0"
tmux send-keys "$([[ -n $EDITOR ]] && echo \\\$EDITOR || echo "cat" ) "\$PROJECT_TMUX"" C-m
tmux split-window -v -p 20  # [---]
tmux split-window -h -p 50  # [ | ]
tmux select-pane -t 1       # [x| ] Whenever set up a new tmux split window, let it at the end.

# Setup a window for ...
tmux new-window -a -t \$PROJECT_NAME:2 -n 'pasta'
tmux split-window -h        # [ | ]
tmux send-keys "net || ping -c 3 google.com" C-m    # net is just a alias
tmux select-pane -t 1       # [x| ]
tmux send-keys "ls && cal" C-m
tmux split-window -v        # [---]
tmux resize-pane -D 20
tmux select-pane -t 1       # [x| ] Whenever set up a new tmux split window, let it at the end.

# Setup a window for SSH
# tmux new-window -n 'SSH' 'ssh abcabc@192.168.1.33 -p 2236'

# Return to the window 1, pane 1
tmux select-window -t \$PROJECT_NAME:1
tmux select-pane -t 1

# create a new tmux window with 'tmux new-windows -a ...' always keep 'zsh' window...
# we can rename the 'zsh' window and have some fun with it.
# @FIXME: the \`if command\` doesn't work properly when I double-click the script.
# so let it be a unexpected feature: =))
# 1. run this script from terminal to open the project and dotifles project
# 2. run this script by double click it to open the project only.
if [[ \$EDITOR =~ ^(vim|nvim|macvim|gvim)$ ]]; then
	tmux rename-window "dotfiles"  # [-1-]
	if [ -n \$DOTFILES ]; then
		tmux send-keys "cd \$DOTFILES && ls" C-m
		tmux send-keys '\$EDITOR -c ":e \$DOTFILES/zsh/.config/nvim/init.vim.symlink" -c ":set syntax=vim"' C-m
	else
		tmux send-keys "\\\$EDITOR -c ':e \\\$MYVIMRC' -c ':set syntax=vim'" C-m
	fi
else
	tmux kill-window #-t 3
	tmux last-window      # Return to the last tmux window
fi

# Attach to session
tmux -2 attach-session -t \$PROJECT_NAME
EOF
# └─────────────────────────────────────────────────────────────────────────────┘
	chmod +x "$1"
}

# abort if we're already inside a TMUX session
[ "$TMUX" == "" ] || FAIL "Abort! \`tm\` cannot be executed inside a tmux session."

if [ ! $# == 0 ]; then
#=[ CREATE A SAMPLE TMUX SCRIPT -or- ATTACHING THE SPECIFIC SESSION ]=========#
	displayTitle "✱ ${underline}TMUX SESSIONS MANAGER${reset}"
	# evaluate parameters -------------------------------------------------
	[[ ! $# == 1 ]] && BADBOY "${red}Too many parameters${reset}. Only \`${magenta}$1${reset}\` is used."
	# 1 - try to figure out the meaningful projectname, which frequently happens when tab-tab is typed quickly,
	# by fixing mistyped paramaters for tm command: .<projectname> <projetname>. <projectname>.tmux
	tmux_name=$(basename "${1%.tmux}") # remove the taling .tmux if any
  tmux_name=${tmux_name%.} # remove the taling dot if running `tm <dotfile>` (<-- tab tab)
  tmux_name=${tmux_name#.} # remove the leading dot if running `tm <dotfile>` (<-- tab tab)
  tmux_name=${tmux_name/.*} # remove all extensions if any

	# 2 - try to fix bad tmux session names by removing all occurances of space, period, comma ...
  if [[ ! "$tmux_name" = "${tmux_name%[[:space:]]*}" || "$tmux_name" == *.* ]]; then
		BAD "${red}Bad session name${reset}. It must have no spaces, no periods, ..."
    tmux_name="$(echo "$tmux_name" | tr -d '[[:space:]]' | tr -d ',.' )"
    ASK "Use \`${yellow}$tmux_name${reset}\` instead [${green}${bold}y${reset}/${red}${bold}n${reset}] "
  	read -p "?" -n 1 -r && echo
  	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 1
	fi

	tmux_conf="$(dirname "$1")/$tmux_name.tmux" # --> always use *.tmux for tm script.

	# startup a "default" session if non currently exists -----------------
	INFO "Checking for \`${cyan}$tmux_name${reset}\` ..."
	tmux has-session -t $tmux_name 2>/dev/null
	if [ "$?" -eq 1 ] ; then
	    BAD "Session named \`${magenta}$tmux_name${reset}\` ${yellow}not found${reset}."
	    if ! [[ -f "$tmux_conf" ]]; then
	    	BAD "The file \`${magenta}$tmux_conf${reset}\` ${yellow}does not exists${reset}. "
    	  ASK "Create \`${yellow}$(basename $tmux_conf)${reset}\` in \`${cyan}$(dirname $tmux_conf)${reset}\` [${green}${bold}y${reset}/${red}${bold}n${reset}] "
    		read -p "?" -n 1 -r && echo
	    	[[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
	    	create_tmuxconf "$tmux_conf"
	    fi
	    if ! [[ -f "$tmux_conf" ]]; then
		  	FAIL "${red}Errors${reset} happen when creating ${cyan}$tmux_conf${reset}"
		  fi

	    INFO "Loading configuration file \`${cyan}$tmux_conf${reset}\`"
    	# fix parameter for source command in working directories <-- source "./<file>.tmux" works. source <file>.tmux won't
		  [[ $tmux_conf = $tmux_name.tmux ]] && tmux_conf=./$tmux_conf
	    sh -c "$tmux_conf"
	else
	    OK "Session found. Connecting ${cyan}$tmux_name${reset} ..."
			tmux attach-session -t $tmux_name
	fi
else
#=[ SHOW TMUX SESSION LIST ]==================================================#
	# present menu for user to choose which workspace to open -------------
	PS3="Choose session/command: "
	options=($(tmux list-sessions -F "#S" 2>/dev/null) "[New Session]" "[zsh]" "[kill all sessions]")
	displayTitle "✱ ${underline}ALL AVAILABLE TMUX SESSIONS${reset}"
	select opt in "${options[@]}"
	do
		case $opt in
			"[New Session]")
				read -p "Enter new session name: " SESSION_NAME
				tmux new -s "$SESSION_NAME"
				break
				;;
			"[zsh]")
				zsh --login
				break;;
			"[kill all sessions]")
				for sess in $(tmux ls | awk '{FS=":" ; print $1}' | sed 's/://g') ; do tmux kill-session -t $sess ; done
				break;;
			*)
				tmux attach-session -t $opt
				break
				;;
		esac
	done
fi

exit 0