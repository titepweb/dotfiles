#!/bin/sh
###############################################################################
# script  : $DOTREPO/install/linkdf   maintained by titepweb at gmail.com     #
# status  : stable. Last edit on 2016-02-05                                   #
# feature   2. source $DOTREPO/link to create symlink or copy dotfiles to ~   #
###############################################################################
# this script designed to be sourced with some inherited parameters ($DOTREPO
# symlinkORcopy, recopy, askbeforeaction, overwrite_all, and backup_all )
# or run with default ones.

# Identify ABSOLUTE path of directory storing the script. Scripts sourced by this script will inherit DOTREPO variable.
if [ -L $DOTREPO ] || [ -z $DOTREPO ]; then
  DOTREPO="$( cd -P "$( dirname "$0" )" && pwd )"
  DOTREPO="$(dirname $DOTREPO)"   # which means, this script must be in $DOTREPO/topic/
fi
source $DOTREPO/install/inform
source $DOTREPO/install/cross-platform

# Prevent to be accidently run/sourced with a parameter.
[[ $1 != "true" ]] && FAIL "Please run $(basename $0) with 'true' parameter"

#### THE CORE LIBRARIES ######################################################

MkParentFolder() {
  local inDir="$(dirname "$1")"

  # Remove $inDir if it is a broken symbolic file
  if [[ -h "$inDir" ]]; then
    [[ -z "$(readsymlink "$inDir" )" ]] && rm "$inDir"
  # ask for remove $inDir if it is a regular file
  elif [[ -f "$inDir" ]]; then
    INFO "File already exists: ${cyan}$inDir${reset}"
    USER "Delete it? [${green}${bold}y${reset}/${red}${bold}n${reset}"]
    read -n 1 action < /dev/tty
    # if not yes, then skip it
    if [[ $action =~ ^[Yy]$ ]]; then
      rm "$inDir"
      OK "Removed${red} ${strike}$inDir${reset}"
    else
      FAIL "Please take a look at ${red}$inDir${reset}"
    fi
  fi

  # Create $inDir if it does not exist
  if [ ! -d "$inDir" ]; then
    mkdir -p "$inDir"       # mkdir can make two parent & son directories just with mkdir /parent_folder/son_folder
    OK "Created ${green}\`$inDir"\`${reset} directory!
  fi
}

SymlinkOrCopy () {
  local src="$1"
  local dst="$2"
  local ext="${src##*.}"

  local overwrite= ; local backup= ; local skip=
  local action=

  # STEP 1 - Evaluate parameters and Choose the right word to ask -----------
  if [ "$src" == "$DOTREPO" ] || ( [ "$symlinkORcopy" == "symlink+copy" ] && [ "$ext" = "symlink" ] ) || [ "$symlinkORcopy" == "symlink" ]; then
      local willbe="linked"
      local askword1="linked to"
      local askword2="Create symlink"
  elif ( [ "$symlinkORcopy" == "symlink+copy" ] && [ "$ext" == "copy" ] ) || ( [ "$symlinkORcopy" == "copy" ] ); then
      local willbe="copied"
      local askword1="overwrited by"
      local askword2="Copy"
  else FAIL "Invalid parameters -- by $FUNCNAME"
  fi

  # STEP 2 - SKIP THE REST STEPS IF -----------------------------------------
  # Case 1 - Don't ask, backup/remove and then recreate symlinks if ---------
  if [ $willbe = "linked" ] && [ -L "$dst" ]; then
    if [ "$(readsymlink "$dst")" == "$src" ]; then
      skip=true;
    fi
  # Case 2 - Don't ask, backup/remove existing destination file of *.copy dotfiles if ... because they may have been configured.
  elif [ $willbe = "copied" ] && [ -e "$dst" ] && [ ! -L "$dst" ]; then
    if [ ! "$recopy" = "true" ]; then
      skip=true;
    fi
  fi

  # STEP 3 - ASK USER FOR MAKING DECISION IF DESTINATION FILES EXIST --------
  if [ ! "$skip" == true ] && [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ ! "$overwrite_all" == "true" ] && [ ! "$backup_all" == "true" ] && [ ! "$skip_all" == "true" ]; then
      ASK "File already exists : ${green}$dst${reset} \n\t   (${cyan}$(file --brief "$dst")${reset})
           Will be $askword1 ${green}$src${reset}
           ${bold}${yellow}s${reset}kip, ${bold}${yellow}S${reset}kip all, ${bold}${yellow}o${reset}verwrite, ${bold}${yellow}O${reset}verwrite all, ${bold}${yellow}b${reset}ackup, ${bold}${yellow}B${reset}ackup all?"

      while true; do
        # Read from tty, needed because we read in outer loop.
        read -n 1 action < /dev/tty

        case "$action" in
          o ) overwrite=true     ; break ;;
          O ) overwrite_all=true ; break ;;
          b ) backup=true        ; break ;;
          B ) backup_all=true    ; break ;;
          s ) skip=true          ; break ;;
          S ) skip_all=true      ; break ;;
          * ) ;;
        esac
      done
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

  # STEP 4 - REMOVE DESTINATION FILES -or- MOVE THEM TO backupDir -----------
    if [ ! "$skip" == true ] && [ ! "$dst" == "$DOTREPO" ]; then
      if [ "$overwrite" == "true" ]; then
        rm -rf "$dst"
        OK "Removed ${green}$dst${reset}"
      fi

      if [ "$backup" == "true" ]; then
        # Back $dst up without loosing directory structure
        local relativeFile=${dst#$home} #remove $home from $file
        # Remove the leading slash if there is one
        if [[ $relativeFile == /* ]]; then
          relativeFile=${relativeFile:1}
        fi
        local bakfile="$backupDir/$relativeFile.BAK.$(date +"%Y-%m-%d_%H-%M")"
        # Make sure that the destination directory exists before backing up.
        MkParentFolder "$bakfile"
        # Backup
        mv "$dst" "$bakfile"
        OK "${green}┌─${reset}Moved ${green}$dst${reset} \n \t   ${green}└─ ✔ ─»${reset} ${green}$bakfile${reset}"
      fi
    fi
  fi

  # STEP 5 - SKIP, SYMLINK, -or COPY ----------------------------------------
  if [ "$skip" == "true" ]; then
    OK "Skipped┌${green}$src${reset} \n \t   ${green}   ✔   ${reset}└${green}$dst${reset}"
  else

    # 1- Make sure that the destination directory exists before creating symlinks or copying
    MkParentFolder "$dst"
    # Ask users before creating symlinks or copying. if destination files has been moved or overwritten, take action.
    if [ "$askbeforeaction" == "true" -a "$overwrite" != "true" -a "$backup" != "true" ]; then
      ASK "$askword2 $(dirname "$dst")/${yellow}$(basename "$dst")${reset}? [${green}${bold}y${reset}/${red}${bold}n${reset}/install ${green}${bold}a${reset}ll] "
      read -n 1 action < /dev/tty
      # if not yes, then skip it
      if [[ $action =~ [Aa] ]]; then
        askbeforeaction=false
      elif [[ ! $action =~ [Yy] ]]; then
        OK "Skipped┌${green}$src${reset} \n \t   ${red}   ✗   ${reset}└${green}$dst${reset}"
        return
      fi
    fi

    # 2- Create symlink or copy
    if [ $willbe = "linked" ] ; then

      # Create native symlinks on Windows.
      export CYGWIN=winsymlinks:nativestrict

      # Symlink command
      ln -s "$src" "$dst"
      symlinkindex=$(($symlinkindex+1))
      OK "${green}╔Linked═${reset}${green}$src${reset} \n \t   ${green}╚═ ✔ ═══${reset}${green}$dst${reset}"

    elif [ $willbe = "copied" ] ; then

      # Copy command (-r stands for recursively copy )
      cp -r "$src" "$dst"
      copyindex=$(($copyindex+1))
      OK "${green}╔Copied═${reset}${green}$src${reset} \n \t   ${green}╚═ ✔ ══>${reset}${green}$dst${reset}"

    fi
  fi
}

function FixDOTFILES () {
  for i in `seq 1 10`; #10 here is customizable
    do
      for file in $( \
        find "$1" \
          -mindepth $i -maxdepth $i \
          -not -path "*/*\.ingore/*" \
          -not -path "*/*\.80%/*" \
          -not -path "$tempDir/*" \
          -name '*.symlink' -or -name '*.copy' \
        \
         ); do
        if [[ $file =~ .*\.(symlink|copy)/.*\.(symlink|copy)$ ]]; then
          # remove the tailing .symlink or .copy
          local renameto="${file%.*}"
          local ext="${file##*.}"
          mv "$file" "$renameto"
          fixindex=$(($fixindex+1))
          # highlight .symlink in the string $file by replacing matched '.symlink'
          renameto=${renameto/.symlink/${red}.symlink${reset}}
          renameto=${renameto/.copy/${red}.copy${reset}}
          echo -e "  $renameto${strike}${red}.$ext${reset}"
        fi
        if [ -L "$file" ] && [[ "$file" =~ .*\.(symlink|copy)$ ]]; then
          deletesymlink=$(($deletesymlink+1))
          rm -rf "$file"
          OK "Removed ${strike}${red}$file${reset}"
        fi
      done
    done
}

#### LOOP THROUGH FILES ######################################################

INSTALL_DOTFILES () {
  displayTitle "INSTALLING DOTFILES"
  INFO "Installing dotfiles from ${cyan}$DOTREPO${reset}\n"

  local topicindex=0;
  local scanindex=0;
  local fixindex=0;
  local deletesymlink=0;
  local symlinkindex=0;
  local copyindex=0;

  local platforms="$(detectplatform)"
  while IFS=$'\n' read -r platform; do
    local home="$(detecthome "$platform")"

    INFO "Installing dotfiles in ${cyan}$home${reset} for platform ${cyan}$platform${reset}"
    # First, add a symlink for this dotfiles directory.
    if [[ ! "$DOTREPO" == "$dotDir" ]]; then
      SymlinkOrCopy "$DOTREPO" "$dotDir"
    fi

    # Find direct child directories (topics), exclude those starting with dots.
    local topics="$(/usr/bin/find "$DOTREPO" -mindepth 1 -maxdepth 1 -type d -not -name '\.*' -not -name '*.ignore' -not -name '*.80%')"
    while IFS=$'\n' read -r topic; do
      topicindex=$(($topicindex+1))
      [[ -z "$topic" ]] && continue
      SCAN "-Topic- $topic"

      if platform_excluded "$topic" "$platform"; then
        INFO "Skipped ${green}$topic${reset} as it is excluded for platform ${cyan}$platform${reset}"
        continue
      fi
# ┌─────────────────────────────────────────────────────────────────────────────┐
      # 1. Remove the taling .symlink in the names of all the sub-directories of another *.symlink directory
      # 2. Symlinks with name *.copy and *.symlink are not allow in $DOTREPO
      FixDOTFILES "$topic"

      # Recursively search any named *.symlink files/directories below each topic directory, exclude files in 80% directories.
      # local symlinks="$(/usr/bin/find "$topic" -mindepth 1 -maxdepth 1 \( -type f -or -type d \) -name '*.symlink')"
      local symlinks="$(/usr/bin/find "$topic" -mindepth 1 \
        -not -path "*/*\.ingore/*" \
        -not -path "*/*\.80%/*" \
        -not -path "$tempDir/*" \
        -and \
        \( \
          \(   -type f \
               -name '*.symlink' -or -name '*.copy' \
          \) -or \( \
               -type d \
               -name '*.symlink' -or -name '*.copy' \
          \) \
        \) \
        )"

      while IFS=$'\n' read -r src; do
        scanindex=$(($scanindex+1))
        [[ -z "$src" ]] && continue

        # remove the leading $topic from the destination directory name
        local dst="$home/${src#$topic/}"
        # remove the leading .symlink or .copy from the destination directory name
        dst=${dst%.symlink}
        dst=${dst%.copy}

        SymlinkOrCopy "$src" "$dst"
# └─────────────────────────────────────────────────────────────────────────────┘
      done <<< "$symlinks"
    done <<< "$topics"
  done <<< "$platforms"

  WARNING "\n✱ ${underline}${bold}DOTFILES INSTALLATION REPORT${reset} ( by ${yellow}$FUNCNAME${reset} from ${yellow}$BASH_SOURCE${reset} )
  ${cyan}${bold}$scanindex${reset} dotfile(s) and ${cyan}${bold}$topicindex${reset} topic(s) were scanned.
  ${red}${bold}$fixindex${reset} dotfile(s)'s name(s) were fixed '${strike}${red}.symlink${reset} or ${strike}${red}.copy${reset}'!
  ${red}${bold}$deletesymlink${reset} ${strike}${red}symlink(s)${reset} in ${cyan}$DOTREPO${reset} was deleted.
  ${cyan}${bold}$symlinkindex${reset} dotfile(s) were symlinked!
  ${cyan}${bold}$copyindex${reset} dotfile(s) were copied!
  ${cyan}${bold}$(($symlinkindex + $copyindex))${reset} dotfile(s) were installed, totally!
  "
}

#### MAIN ####################################################################

# STEP 1 # Check Platform and Create global variables
# ---------------------------------------------------
  platform="$(detectplatform)"
  home="$(detecthome "$platform")"    # create the global variable home

  backupDir=$home/dotfiles-backup     #--> This folder should not be in $dotDir because if we delete $dotDir, we also delete $backupDir
  # dotDir will be used to create symlink from $dotDir to $dotDir
  dotDir=$home/.dotfiles              #--> Don't change this because bashrc and zsh setup contain: 'export DOTREPO=~/.dotfiles'

  # Set special directories and files based on defined dotDir.
  binDir=$DOTREPO/bin                  #--> include in .bashrc or .bash_profile: export PATH=$binDir:$PATH
  tempDir=$DOTREPO/temp                #--> include in .gitignore

  # currently, logfile is not used. Save these for the later version of nmdf
  logfile=$DOTREPO/nmdf.log            #--> include in .gitignore
    # Delete log file if its size is bigger than 50 KiB
    if [ -f $logfile ]; then
      size=$(stat -c%s $logfile)
      [[ $size > 50000 ]] && rm $logfile
    fi

# STEP 2 # Verify that the backup and special directories exist
# -------------------------------------------------------------
  [ ! -d "$backupDir" ] && mkdir -v -p "$backupDir"
  [ ! -d "$binDir" ] && mkdir -v -p "$binDir"
  [ ! -d "$tempDir" ] && mkdir -v -p "$tempDir"

# STEP 3 # Default installation parameters
# ----------------------------------------
[[ -n $symlinkORcopy ]] || symlinkORcopy="symlink+copy" # valid value = "symlink" , "copy" , "symlink+copy"
[[ -n $recopy ]] || recopy=false                        # valid value = "true" or anything else
[[ -n $askbeforeaction ]] || askbeforeaction=true       # valid value = "true" or anything else
[[ -n $overwrite_all ]] || overwrite_all=false          # valid value = "true" or anything else
[[ -n $backup_all ]] || backup_all=false                # valid value = "true" or anything else

# STEP 4 # Take acttion
# ---------------------
# [[ $0 != "$BASH_SOURCE" ]] && return || INSTALL_DOTFILES && echo -e "\n$message" && exit 0

sourced () { # cross-shell (bash, ksh, zsh)
  ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
   [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
      printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
   [[ -n $BASH_VERSION && $0 != "$BASH_SOURCE" ]]) && return 0 || return 1
}

if sourced ; then
  return
else
  INSTALL_DOTFILES
  echo -e "\n$message"
  exit 0
fi
