#!/bin/sh
###############################################################################
# script  : $DOTREPO/install/installpkg   maintained by titepweb at gmail.com #
# status  : stable. Last edit on 2016-02-05                                   #
# feature : 1. scan for $DOTREPO/topic/.install.sh and source them to install #
#              packages and configure them.                                   #
###############################################################################
# this script designed to be sourced with some inherited parameters ($DOTREPO)
# or run ( and DOTREPO will be created).

# Identify ABSOLUTE path of directory storing the script. Scripts sourced by this script will inherit DOTREPO variable.
if [ -L $DOTREPO ] || [ -z $DOTREPO ]; then
  DOTREPO="$( cd -P "$( dirname "$0" )" && pwd )"
  DOTREPO="$(dirname $DOTREPO)"   # which means, this script must be in $DOTREPO/topic/
fi
source $DOTREPO/install/inform
source $DOTREPO/install/cross-platform

# Prevent to be accidently run/sourced with a parameter.
[[ $1 != "true" ]] && FAIL "Please run $(basename $0) with 'true' parameter"

#=[ LIBRARIES ALLOWING MULTI-PLATFORM COMPATIBILITY ]=========================#

installed () {
  if [ "$(uname)" == "Darwin" ]; then
    echo "@FIXME"
  elif [[ "$(uname)"=="Linux" ]]; then
    if (pacman -Q -q $1 >/dev/null)
      then return 0 #Installed
      else return 1 #Not Installed
    fi
  fi
}

install () {
  local distro ; local pgkmanager
  # 1 -- detect distro and package manager
  case `uname` in
    Linux)
      distro=$(cat /etc/issue | head -n +1 | awk '{print $1}')
      case $distro in
        Arch)
          if [ $1 == "--AUR" ]; then
            [[ $(which yaourt) ]] && pgkmanager="yaourt -Sb --export ~/Downloads --noconfirm" || FAIL "yaourt is not installed."
          else
            [[ $(which pacman) ]] && pgkmanager="sudo pacman -S --noconfirm" || FAIL "pacman is not installed."
          fi
        ;;
        *) FAIL "This script was tested on $distro."
      esac
    ;;
    Darwin)
      if test ! $(which brew); then
        INFO "✱ Installing ${cyan}$Homebrew{reset}..."
        echo -----------------------------------
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        echo -----------------------------------
      fi
      pgkmanager="brew install"
    ;;
    *) FAIL "This script unsupports `uname`."
    ;;
  esac

  # 2 -- Install
  for pkg in $* ; do
    if installed $pkg
      then OK "✔ ${green}$pkg${reset} has been installed."
      else
        INFO "✱ Installing ${cyan}$pkg${reset}"
        echo -----------------------------------
        $pgkmanager $pkg
        echo -----------------------------------
        pkgindex=$(($pkgindex+1))
    fi
  done
}

#=[LOOP THROUGH FILES ]=======================================================#

INSTALL_PACKAGES () {
  displayTitle "INSTALL NECCESSARY PACKAGES"

  local topicindex=0;
  local scanindex=0;
  local pkgindex=0;
  local insfileindex=0;

  local platforms="$(detectplatform)"
  while IFS=$'\n' read -r platform; do
    local home="$(detecthome "$platform")"

    # Look for .install.sh files and source them
    topics="$(/usr/bin/find "$DOTREPO" -mindepth 1 -maxdepth 1 -type d -not -name '\.*' -not -name '*.ignore' -not -name '*.80%')"
    while IFS=$'\n' read -r topic; do
      topicindex=$(($topicindex+1))
      [[ -z "$topic" ]] && continue
      SCAN "-Topic- $topic"

      if platform_excluded "$topic" "$platform"; then
        INFO "Skipped ${green}$topic${reset} as it is excluded for platform ${cyan}$platform${reset}"
        continue
      fi
# ┌─────────────────────────────────────────────────────────────────────────────┐
      insfiles="$(find "$topic" -type f -name .install.sh \
                    -not -path "*/*\.ingore/*" \
                    -not -path "*/*\.80%/*" \
                  )"
      while IFS=$'\n' read -r insfile; do
        insfileindex=$(($insfileindex+1))
        [[ -z "$insfile" ]] && continue

        INFO "Source ${cyan}$insfile${reset}"
        source "$insfile"
# └─────────────────────────────────────────────────────────────────────────────┘
      done <<< "$insfiles"
    done <<< "$topics"
  done <<< "$platforms"

  WARNING "\n✱ ${underline}${bold}PACKAGES INSTALLATION REPORT${reset} ( by ${yellow}$FUNCNAME${reset} from ${yellow}$BASH_SOURCE${reset} )
  ${cyan}${bold}$insfileindex${reset} installation scripts(s) and ${cyan}${bold}$topicindex${reset} topic(s) were scanned.
  ${cyan}${bold}$pkgindex${reset} package(s) were installed!
  "
}

#=[ MAIN ]====================================================================#

# [[ $0 != "$BASH_SOURCE" ]] && return || INSTALL_PACKAGES && echo -e "\n$message" && exit 0

sourced () { # cross-shell (bash, ksh, zsh)
  ([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] ||
   [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
      printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] ||
   [[ -n $BASH_VERSION && $0 != "$BASH_SOURCE" ]]) && return 0 || return 1
}

if sourced ; then
  return
else
  INSTALL_PACKAGES
  echo -e "\n$message"
  exit 0
fi
